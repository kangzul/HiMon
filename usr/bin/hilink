#!/bin/bash
# IP Hunter by ais sia
# Optimized by kangzul

clear

DIR=/usr/bin
GITHUB=https://raw.githubusercontent.com/kangzul/HiMon/main
MAX_RETRIES=3

# Start Helper Functions
auth() {
    local data=$(request "webserver/SesTokInfo")
    cookie=$(grep -o "SessionID=.*" <<<"$data" | cut -b 10-147)
    token=$(grep -o "<TokInfo>.*</TokInfo>" <<<"$data" | cut -b 10-41)
}

request() {
    local endpoint=$1
    local method=${2:-GET}
    local data=${3:-}
    local url="http://$ipmodem/api/$endpoint"

    [[ "$endpoint" != "webserver/SesTokInfo" ]] && auth

    local headers=(
        -H "Host: $ipmodem"
        -H "Connection: keep-alive"
        -H "Accept: */*"
        -H "X-Requested-With: XMLHttpRequest"
        -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36"
        -H "Referer: http://$ipmodem/html/home.html"
        -H "Accept-Encoding: gzib, deflate"
        -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"
        -H "Cookie: $cookie"
    )

    if [[ "$method" == "POST" ]]; then
        headers+=(
            -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8"
            -H "__RequestVerificationToken: $token"
        )
        curl -s -X POST "$url" "${headers[@]}" -d "$data"
    else
        curl -s "$url" "${headers[@]}"
    fi
}

human_print() {
    while read B _; do
        for u in B KB MB GB TB; do
            [[ $u == B ]] && s=$B || s=$(((s + 512) / 1024))
            ((s < 1024)) && {
                echo "$s $u"
                break 2
            }
        done
    done
}

service() {
    [[ $1 == 00 ]] && echo Auto
    [[ $1 == 03 ]] && echo "4G Only"
}

network() {
    local -A n=(
        [0]="No service" [1]="GSM (2G)" [2]="GPRS (2G)" [3]="EDGE (2G)" [21]="IS95A" [22]="IS95B"
        [23]="CDMA 1X" [24]="EVDO rev.0" [25]="EVDO rev.A" [26]="EVDO rev.B" [27]="HYBRID CDMA 1X"
        [28]="HYBRID EVDO rev.0" [29]="HYBRID EVDO rev.A" [30]="HYBRID EVDO rev.B" [31]="eHRPD rel.0"
        [32]="eHRPD rel.A" [33]="eHRPD rel.B" [34]="HYBRID eHRPD rel.0" [35]="HYBRID eHRPD rel.A"
        [36]="HYBRID eHRPD rel.B" [41]="UMTS (3G)" [42]="HSDPA (3G)" [43]="HSUPA (3G)" [44]="HSPA (3G)"
        [45]="HSPA+ (3.5G)" [46]="DC-HSPA+ (3.5G)" [61]="TD-SCDMA (3G)" [62]="TD-HSDPA (3G)" [63]="TD-HSUPA (3G)"
        [64]="TD-HSPA (3G)" [65]="TD-HSPA+ (3.5G)" [81]="802.16E" [101]="LTE (4G)" [1011]="LTE CA (4G+)" [111]="NR (5G)"
    )
    echo "${n[$1]}"
}

to_hex8() {
    local dec=$1
    local hex=$(printf "%X" "$dec")
    printf "%08s" "$hex" | tr ' ' '0'
}

download_file() {
    local dest=$1
    local src=$2
    local retries=0
    local temp="${dest}_temp"

    while [ $retries -lt $MAX_RETRIES ]; do
        wget -O "$temp" "$src"
        if [ $? -eq 0 ] && [ -s "$temp" ]; then
            rm -f "$dest"
            mv "$temp" "$dest"
            chmod +x "$dest"
            return 0
        fi
        echo "Download failed $src, try again... ($((retries + 1))/$MAX_RETRIES)"
        rm -f "$temp"
        retries=$((retries + 1))
        sleep 2
    done

    echo "Download failed $src after $MAX_RETRIES trying. Stop Installation..."
    exit 1
}
# End Helper Functions

ipmod() {
    ipmodem=$(uci get hilink.settings.router_ip)
    echo -e "IP Address Modem Anda ${ipmodem}"
}

login() {
    ipmod
    pass=$(uci get hilink.settings.password)

    check=$(request "user/state-login")
    state=$(echo $check | awk -F "<State>" '{print $2}' | awk -F "</State>" '{print $1}')
    type=$(echo $check | awk -F "<password_type>" '{print $2}' | awk -F "</password_type>" '{print $1}')
    if [ $state = "0" ]; then
        echo "Activated Successfully"
    else
        if [ $type = "4" ]; then
            pass1=$(echo -n "$pass" | sha256sum | head -c 64 | base64 -w 0)
            pass1=$(echo -n "admin$pass1$token" | sha256sum | head -c 64 | base64 -w 0)
            pass1=$(echo -n "$pass1</Password><password_type>4</password_type>")
        else
            pass1=$(echo -n "$pass" | base64 -w 0)
            pass1=$(echo -n "$pass1</Password>")
        fi
        login=$(request "user/login" "POST" '<?xml version="1.0" encoding="UTF-8"?><request><Username>admin</Username><Password>'$pass1'</Password></request>')
        scoki=$(echo "$login" | grep [Ss]et-[Cc]ookie | cut -d':' -f2 | cut -b 1-138)
        if [ $scoki ]; then
            echo -e "Login Success"
        else
            echo -e "Login Failed"
            exit
        fi
    fi
}

info() {
    clear
    login

    echo -e "---------------------------"
    oper=$(request "net/current-plmn")
    operator=$(echo $oper | awk -F "<FullName>" '{print $2}' | awk -F "</FullName>" '{print $1}')
    echo -e "Operator : $operator"

    ip=$(request "device/information")
    tp=$(echo $ip | awk -F "<DeviceName>" '{print $2}' | awk -F "</DeviceName>" '{print $1}')
    echo -e "Device : $tp"

    dns=$(request "monitoring/status")
    ipp=$(echo $dns | awk -F "<WanIPAddress>" '{print $2}' | awk -F "</WanIPAddress>" '{print $1}')
    dns1=$(echo $dns | awk -F "<PrimaryDns>" '{print $2}' | awk -F "</PrimaryDns>" '{print $1}')
    dns2=$(echo $dns | awk -F "<SecondaryDns>" '{print $2}' | awk -F "</SecondaryDns>" '{print $1}')
    net=$(echo $dns | awk -F "<CurrentNetworkTypeEx>" '{print $2}' | awk -F "</CurrentNetworkTypeEx>" '{print $1}')
    echo -e "Wan IP : $ipp"
    echo -e "DNS 1 : $dns1"
    echo -e "DNS 2 : $dns2"
    echo -ne "Network : "
    network $net

    td=$(request "monitoring/traffic-statistics")
    tup=$(echo $td | awk -F "<TotalUpload>" '{print $2}' | awk -F "</TotalUpload>" '{print $1}' | human_print)
    tdd=$(echo $td | awk -F "<TotalDownload>" '{print $2}' | awk -F "</TotalDownload>" '{print $1}' | human_print)
    echo -e "Total Upload : $tup"
    echo -e "Total Download : $tdd"

    dvi=$(request "device/signal")
    pci=$(echo $dvi | awk -F "<pci>" '{print $2}' | awk -F "</pci>" '{print $1}')
    cellid=$(echo $dvi | awk -F "<cell_id>" '{print $2}' | awk -F "</cell_id>" '{print $1}')
    echo -e "PCI : $pci"
    echo -e "Cell ID : $cellid"
    echo -e "---------------------------"
}

iphunter() {
    clear
    login

    dns=$(request "monitoring/status")
    previpp=$(echo $dns | awk -F "<WanIPAddress>" '{print $2}' | awk -F "</WanIPAddress>" '{print $1}')
    echo -e "---------------------------"

    grs=$(request "net/net-mode")
    srg=$(echo $grs | awk -F "<NetworkMode>" '{print $2}' | awk -F "</NetworkMode>" '{print $1}')
    echo -n "Previous Service : "
    service $srg

    case $srg in
    "00")

        set4g=$(request "net/net-mode" "POST" '<?xml version="1.0" encoding="UTF-8"?><response><NetworkMode>03</NetworkMode><NetworkBand>3FFFFFFF</NetworkBand><LTEBand>7FFFFFFFFFFFFFFF</LTEBand></response>')
        res=$(echo $set4g | awk -F "<response>" '{print $2}' | awk -F "</response>" '{print $1}')
        echo "Set 4G Only : $res"
        sleep 2
        ;;
    "03")

        setauto=$(request "net/net-mode" "POST" '<?xml version="1.0" encoding="UTF-8"?><response><NetworkMode>00</NetworkMode><NetworkBand>3FFFFFFF</NetworkBand><LTEBand>7FFFFFFFFFFFFFFF</LTEBand></response>')
        res=$(echo $setauto | awk -F "<response>" '{print $2}' | awk -F "</response>" '{print $1}')
        echo -e "Set Auto : $res"
        sleep 3

        set4g=$(request "net/net-mode" "POST" '<?xml version="1.0" encoding="UTF-8"?><response><NetworkMode>03</NetworkMode><NetworkBand>3FFFFFFF</NetworkBand><LTEBand>7FFFFFFFFFFFFFFF</LTEBand></response>')
        res=$(echo $set4g | awk -F "<response>" '{print $2}' | awk -F "</response>" '{print $1}')
        echo "Set 4G Only : $res"
        sleep 2
        ;;
    esac

    grs=$(request "net/net-mode")
    srg=$(echo $grs | awk -F "<NetworkMode>" '{print $2}' | awk -F "</NetworkMode>" '{print $1}')
    echo -n "Current Service : "
    service $srg
    echo -e "---------------------------"
    sleep 1

    oper=$(request "net/current-plmn")
    operator=$(echo $oper | awk -F "<FullName>" '{print $2}' | awk -F "</FullName>" '{print $1}')
    echo -e "Operator : $operator"

    ip=$(request "device/information")
    tp=$(echo $ip | awk -F "<DeviceName>" '{print $2}' | awk -F "</DeviceName>" '{print $1}')
    sleep 2

    dns2=$(request "monitoring/status")
    ipp=$(echo $dns2 | awk -F "<WanIPAddress>" '{print $2}' | awk -F "</WanIPAddress>" '{print $1}')
    echo -e "Device : $tp"
    echo -e "Wan IP (Before) : $previpp"
    echo -e "Wan IP (After) : $ipp"
    echo -e "---------------------------"
    sleep 2
}

restart() {
    clear
    login
    clear

    res=$(request "device/control" "POST" '<?xml version="1.0" encoding="UTF-8"?><request><Control>1</Control></request>')
    ress=$(echo $res | awk -F "<response>" '{print $2}' | awk -F "</response>" '{print $1}')
    if [ "$ress" = "OK" ]; then
        echo -e "Rebooting..."
    else
        echo -e "Reboot Error"
    fi
}

lock() {
    clear
    ipmod
    clear
    echo -e "---------------------------"
    echo -e "Connecting to $ipmodem"
    sleep 1

    adb kill-server >/dev/null 2>&1
    adb connect "$ipmodem" >/dev/null 2>&1
    sleep 2

    local cek=$(adb devices -l | grep "$ipmodem:5555" | awk -F ":" '{print $1}')
    if [ "$cek" = "$ipmodem" ]; then
        echo -e "Device connected!"
        sleep 1
    else
        echo -e "Device not connected!"
        sleep 1
        echo -e "Press enter to back in menu..."
        read
        lock
        return
    fi
    echo -e "---------------------------"

    read -p "BAND : " band
    read -p "PCI : " pci
    read -p "DL Frequency : " dlfreq
    echo -e "---------------------------"

    bandx=$(to_hex8 "$band")
    pcix=$(to_hex8 "$pci")
    dlfreqx=$(to_hex8 "$dlfreq")

    bandx1=${bandx:6:2}
    pcix1=${pcix:6:2}
    pcix2=${pcix:4:2}
    dlfreqx1=${dlfreqx:6:2}
    dlfreqx2=${dlfreqx:4:2}

    adb push balong-nvtool / >/dev/null 2>&1
    adb shell chmod 777 /balong-nvtool >/dev/null 2>&1
    adb shell "/balong-nvtool -m 53810:03:00:00:00:$bandx1:01:$bandx1:01:$pcix1:$pcix2:$dlfreqx1:$dlfreqx2:00:00:00:00 > /dev/null 2>&1"

    echo -e "Finish Locking Cell ID..."
    sleep 1
    echo -e "Rebooting..."
    screen -dmS res adb shell "atc AT^RESET > /dev/null 2>&1"
    sleep 2
    kill $(screen -list | grep res | awk -F '[.]' '{print $1}') >/dev/null 2>&1
    adb kill-server >/dev/null 2>&1
    echo -e "Closing..."
    echo -e "---------------------------"
}

unlock() {
    clear
    ipmod
    clear
    echo -e "---------------------------"
    echo -e "Connecting to $ipmodem"
    sleep 2

    adb kill-server >/dev/null 2>&1
    adb connect "$ipmodem" >/dev/null 2>&1
    sleep 2

    local cek=$(adb devices -l | grep "$ipmodem:5555" | awk -F ":" '{print $1}')
    if [ "$cek" = "$ipmodem" ]; then
        echo -e "Device connected!"
        sleep 2
    else
        echo -e "Device not connected!"
        sleep 2
        echo -e "Press enter to back in menu..."
        read
        unlock
        return
    fi

    echo -e "---------------------------"
    adb push balong-nvtool / >/dev/null 2>&1
    adb shell chmod 777 /balong-nvtool >/dev/null 2>&1
    adb shell "/balong-nvtool -m 53810:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 > /dev/null 2>&1"

    echo -e "Finish Unlocking Cell ID..."
    sleep 2
    echo -e "Rebooting..."
    screen -dmS res adb shell "atc AT^RESET > /dev/null 2>&1"
    sleep 2
    kill $(screen -list | grep res | awk -F '[.]' '{print $1}') >/dev/null 2>&1
    adb kill-server >/dev/null 2>&1

    echo -e "Closing..."
    echo -e "---------------------------"
}

update() {
    clear
    download_file "$DIR/m" "$GITHUB/usr/bin/m"
    download_file "$DIR/hilink" "$GITHUB/usr/bin/hilink"
    download_file "$DIR/himon" "$GITHUB/usr/bin/himon"
    sleep 2
}

if [ $(opkg list-installed | grep adb | awk 'NR==1' | awk '{print $1}') != "adb" ]; then
    opkg update && opkg install adb
    clear
fi
if [ -f $(opkg list-installed | grep screen | awk '{print $1}') ]; then
    opkg update && opkg install screen
    clear
fi
case $1 in
"info")
    info $2
    exit
    ;;
"iphunter")
    iphunter
    exit
    ;;
"reboot")
    restart
    exit
    ;;
"lock")
    lock
    exit
    ;;
"unlock")
    unlock
    exit
    ;;
"update")
    update
    exit
    ;;
esac
